from tkinter import *
from tkinter import ttk
import sqlite3
import random
import time
import sys,os
from selenium import webdriver
import webbrowser
from selenium.webdriver.common.keys import Keys

class Loadingscreen():
    def __init__(self,root):
        self.root=root

        self.img =PhotoImage(file=r"C:\Users\Hadra\Documents\project bg.png")
        self.bg = Label(self.root,image=self.img)
        self.bg.place(x=0,y=0,relwidth=1,relheight=1)

        self.fr = Frame(self.bg,bg='#FAD7B3')
        self.fr.pack(expand=True)

        self.txt = Label(self.fr,text='loading...',bg='#FFE5CC',font='none 12 bold')
        self.txt.grid(row=0,column=0,pady=10)

        self.progress_var = StringVar()
        self.loading = ttk.Progressbar(self.fr ,variable =self.progress_var, orient=HORIZONTAL, length=400, mode='determinate')
        self.loading.grid(row=1,column=0)

        self.calculation()

    def progress(self):
        for x in range(101):   
            time.sleep(0.03)
            self.txt["text"]='loading...'+str(x)+' %'
            self.progress_var.set(x)
            self.bg.update()
        if x==100:
            self.root.destroy()

    def calculation(self):
        try:
            self.progress()
        except _tkinter.TclError:
            pass

class GUI():
    def __init__(self,root):
        self.root=root
        #-------------------------------------------------------------------------------------------main frames

        self.left = Frame(self.root,bg='#FFE5CC',relief =RAISED,bd=5)#raised gia na eksexei
        self.left.pack(fill='both',expand=1,side='left')

        self.right = Frame(self.root,bg='#FFE5CC',relief =RAISED,bd=5)#raised gia na eksexei
        self.right.pack(fill='both',expand=1,side='right')

        #-------------------------------------------------------------------------------------------- left side

        self.lefttop = Frame(self.left,bg='#461220',relief =RAISED)#raised gia na eksexei
        self.lefttop.pack(fill='both',expand=1)

        self.imglogo =PhotoImage(file=r"C:\Users\Hadra\Downloads\download (1).png")
        self.logo = Label(self.lefttop,image=self.imglogo)
        self.logo.grid(row=0,column=0)

        self.course =['1-Στατιστικά','2-Όλα τα παρακάτω','3-Λινκς','4-Συγγραφείς','5-Ημερομηνιές','6-Τίτλοι','7-Θέματα']
        self.l1 = Label(self.lefttop,text='Eπέλεξε ένα από τα παρακάτω\nκαι πάτα για αναζήτηση',pady=20,padx=15,bg='#461220',fg='white',font='none 10 bold')
        self.l1.grid(row=1,column=0)

        self.select = Button(self.lefttop,text='SEARCH',command=self.combo, font='none 8 bold', pady=1, bg='#fcb9b2',fg='black',borderwidth=3,width=23,activebackground='#FFE5CC')
        self.select.grid(row=2,column=0,padx=3,pady=5)

        self.cmb = ttk.Combobox(self.lefttop,value=self.course,width=25)
        self.cmb.grid(row=3,column=0)
        self.cmb.current(0)
        
        #--------------------------------------------------------------------------------------------- pano meros
        
        self.righttop =Frame(self.right,bg='#b23a48')
        self.righttop.pack(fill='x',side='top')

        self.top = Label(self.righttop,text='ΝΗΜΕΡΤΗΣ - Διδακτορικές Διατριβές',fg='#8c2f39',bg='#FFF9F9',font='ariel 52 bold',pady=40,padx=196,relief=RAISED)
        self.top.grid(row=0,column=0)

        #--------------------------------------------------------------------------------------------- kato apo titlo

        self.frame2 =Frame(self.right,bg='#b23a48')
        self.frame2.pack(fill='x')

        self.search =Entry(self.frame2,borderwidth=8,width=45)
        self.search.grid(row=1,column=0,padx=40,pady=5,rowspan=3)
        self.search.bind('<Return>',self.find)

        self.bt = Button(self.frame2,text='SEARCH',command=self.click, fg='black', bg='#fcb9b2', padx = 5, pady = 5,font='none 10 bold',borderwidth=3)
        self.bt.grid(row=1,column=1,pady=5,padx=1,rowspan=3)
        self.bt.bind("<Enter>", self.on_enter1)
        self.bt.bind("<Leave>", self.on_leave1)

        self.link = Button(self.frame2,text='ΝΗΜΕΡΤΗΣ',command=self.clicklink, fg='black', bg='#fcb9b2', padx = 5, pady = 5,font='none 10 bold',borderwidth=3)
        self.link.grid(row=1,column=3,pady=5,padx=30,rowspan=3)
        self.link.bind("<Enter>", self.on_enter)
        self.link.bind("<Leave>", self.on_leave)

        self.l = Label(self.frame2,text='Ιδρυματικό Αποθετήριο Πανεπιστημίου Πατρών',font='none 12 bold',bg='#b23a48',fg='white',pady=10)
        self.l.grid(row=1,column=4,padx=10,pady=5)
        #----------------------------------------------------------------------------------------------- kyrios meros
  
        self.frame3 = LabelFrame(self.right,bg='#FFE5CC',text="results")
        self.frame3.pack(side='right',fill='both',expand=True,anchor=E)
        self.clickcount=0
        #-------------------------------------------------------------------------------------------------
    def goto_link(self,link):
        PATH = 'C:\Program Files (x86)\chromedriver.exe'
        driver = webdriver.Chrome(PATH)
        driver.get(str(link))

    def callback(self,event):
        webbrowser.open_new(event.widget.cget("text"))

    def recreate_widget(self):
        self.frame3.pack_forget()
        self.frame3 =Frame(self.right,bg='#FFE5CC')
        self.frame3.pack(side='right',fill='both',expand=True,anchor=E)

    def combo(self):
        #conn = sqlite3.connect('HMTYof.db')
        #conn = sqlite3.connect('HMTYof_complete.db')
        conn = sqlite3.connect('HMTYof_with_dates.db')
        c = conn.cursor()

        if self.cmb.get()=='1-Στατιστικά':
            self.recreate_widget()
            pass

        if self.cmb.get()=='2-Όλα τα παρακάτω':
            self.recreate_widget()
            c.execute('SELECT * FROM HMTYof')
            ola = c.fetchall()
            #ola = c.fetchmany(50)
            x=2

            # Create A Main Frame
            main_frame = Frame(self.frame3)
            main_frame.pack(fill=BOTH, expand=1)

            # Create A Canvas
            my_canvas = Canvas(main_frame,bg='#FFE5CC')
            my_canvas.pack(side=LEFT, fill=BOTH, expand=1)

            # Create ANOTHER Frame INSIDE the Canvas
            second_frame = Frame(my_canvas,bg='#FFE5CC')

            third_frame = Frame(my_canvas)
            third_frame.pack(side=BOTTOM,fill=X, expand=1,anchor='se')

            # Add Scrollbars To The Canvas
            my_scrollbar = ttk.Scrollbar(main_frame, orient=VERTICAL, command=my_canvas.yview)
            my_scrollbar.pack(side=RIGHT, fill=Y)

            my_scrollbar1 = ttk.Scrollbar(third_frame, orient=HORIZONTAL, command=my_canvas.xview)
            my_scrollbar1.pack(side=BOTTOM, fill=X)

            # Configure The Canvas
            my_canvas.configure(xscrollcommand=my_scrollbar1.set,yscrollcommand=my_scrollbar.set)
            my_canvas.bind('<Configure>', lambda e: my_canvas.configure(scrollregion = my_canvas.bbox("all")))

            # Add that New frame To a Window In The Canvas
            my_canvas.create_window((0,0), window=second_frame, anchor="ne")
            rank=1
            for o in ola:
                self.query_label1=Label(second_frame,text=str(rank),bg='#FFE5CC',pady=3,borderwidth=3,font='none 9 bold')
                self.query_label1.grid(row=x,column=0,pady=5,padx=5)
                self.sep = ttk.Separator(second_frame, orient=VERTICAL).grid(column=1, row=x-2, rowspan=3, sticky='ns')

                self.query_label1=Label(second_frame,text=str(o[0]),bg='#FFE5CC',pady=3,borderwidth=3,font='none 7 bold',cursor="hand2")
                self.query_label1.grid(row=x,column=2,pady=5,padx=5)
                self.query_label1.bind("<Button-1>",self.callback)
                self.sep = ttk.Separator(second_frame, orient=VERTICAL).grid(column=3, row=x-2, rowspan=3, sticky='ns')

                self.query_label=Label(second_frame,text=str(o[1]),bg='#FFE5CC',pady=3,borderwidth=3,font='none 7 bold')
                self.query_label.grid(row=x,column=4,pady=5,padx=5)
                self.sep = ttk.Separator(second_frame, orient=VERTICAL).grid(column=5, row=x-2, rowspan=3, sticky='ns')

                self.query_label=Label(second_frame,text=str(o[2]),bg='#FFE5CC',pady=3,borderwidth=3,font='none 7 bold')
                self.query_label.grid(row=x,column=6,pady=5,padx=5)
                self.sep = ttk.Separator(second_frame, orient=VERTICAL).grid(column=7, row=x-2, rowspan=3, sticky='ns')

                self.query_label=Label(second_frame,text=str(o[3]),bg='#FFE5CC',pady=3,borderwidth=3,font='none 7 bold')
                self.query_label.grid(row=x,column=8,pady=5,padx=5)
                self.sep = ttk.Separator(second_frame, orient=VERTICAL).grid(column=9, row=x-2, rowspan=3, sticky='ns')

                self.query_label=Label(second_frame,text=str(o[4]),bg='#FFE5CC',pady=3,borderwidth=3,font='none 7 bold')
                self.query_label.grid(row=x,column=10,pady=5,padx=5)
                #self.query_label=Label(second_frame,text=str(o[5]),bg='#FFE5CC',pady=3,borderwidth=3,font='none 7 bold')
                #self.query_label.grid(row=x,column=5,pady=5,padx=5)
                x+=1
                rank+=1
            # headings
            self.query_label=Button(second_frame,text='id',bg='#FFE5CC',pady=3,borderwidth=3,font='none 12 bold',relief=SUNKEN)
            self.query_label.grid(row=0,column=0,pady=5,padx=5)
            
            self.query_label=Button(second_frame,text='link',bg='#FFE5CC',pady=3,borderwidth=3,font='none 12 bold',relief=SUNKEN)
            self.query_label.grid(row=0,column=2,pady=5,padx=5)

            self.query_label=Button(second_frame,text='title',bg='#FFE5CC',pady=3,borderwidth=3,font='none 12 bold',relief=SUNKEN)
            self.query_label.grid(row=0,column=4,pady=5,padx=5)

            self.query_label=Button(second_frame,text='title-translated',bg='#FFE5CC',pady=3,borderwidth=3,font='none 12 bold',relief=SUNKEN)
            self.query_label.grid(row=0,column=6,pady=5,padx=5)

            self.query_label=Button(second_frame,text='authors',bg='#FFE5CC',pady=3,borderwidth=3,font='none 12 bold',relief=SUNKEN)
            self.query_label.grid(row=0,column=8,pady=5,padx=5)
        
            self.query_label=Button(second_frame,text='issuedates',bg='#FFE5CC',pady=3,borderwidth=3,font='none 12 bold',relief=SUNKEN)
            self.query_label.grid(row=0,column=10,pady=5,padx=5)
            
            #HORIZONTAL SEP LINES
            for i in range(11):
                self.sep = ttk.Separator(second_frame, orient=HORIZONTAL)
                self.sep.grid(column=i, row=1,sticky="ew")
            #the sticky attribute, which says "if there's more space than needed for this widget, make the edges of the widget "stick" to specific sides of its container".
            conn.commit()
            conn.close()

        if self.cmb.get()=='3-Λινκς':
            self.recreate_widget()
            c.execute('SELECT link FROM HMTYof')
            links= c.fetchall()
            x=0
            y=1
            # Create A Main Frame
            main_frame = Frame(self.frame3)
            main_frame.pack(fill=BOTH, expand=1)

            # Create A Canvas
            my_canvas = Canvas(main_frame,bg='#FFE5CC')
            my_canvas.pack(side=LEFT, fill=BOTH, expand=1)

            # Add A Scrollbar To The Canvas
            my_scrollbar = ttk.Scrollbar(main_frame, orient=VERTICAL, command=my_canvas.yview)
            my_scrollbar.pack(side=RIGHT, fill=Y)

            # Configure The Canvas
            my_canvas.configure(yscrollcommand=my_scrollbar.set)
            my_canvas.bind('<Configure>', lambda e: my_canvas.configure(scrollregion = my_canvas.bbox("all")))

            # Create ANOTHER Frame INSIDE the Canvas
            second_frame = Frame(my_canvas,bg='#FFE5CC')

            # Add that New frame To a Window In The Canvas
            my_canvas.create_window((0,0), window=second_frame, anchor="ne")
            rank=1
            for link in links:
                self.query_label1=Label(second_frame,text=str(rank),bg='#FFE5CC',pady=3,borderwidth=3,font='none 11 bold')
                self.query_label1.grid(row=x,column=0,pady=5,padx=5)
                self.query_label_link=Label(second_frame,text=str(link[0]),bg='#fcb9b2',pady=3,borderwidth=3,cursor="hand2")
                self.query_label_link.grid(row=x,column=y,pady=5,padx=30)
                self.query_label_link.bind("<Button-1>",self.callback)
                x+=1
                rank+=1
            conn.commit()
            conn.close()

        if self.cmb.get()=='4-Συγγραφείς':
            def sort(): 
                self.clickcount+=1
                self.text.delete('1.0', END)
                displayed_text=''
                if self.clickcount % 2==0:
                    rank=1
                    for a in auth:
                        displayed_text += str(rank)+')  '+str(a[0]) +2*'\n'
                        rank+=1
                else:
                    for a in sorted(auth):
                        displayed_text +=str(a[0]) +2*'\n'
                self.text.insert('end', displayed_text)

            self.recreate_widget()
            #self.alpha_order = Checkbutton(self.frame3,command=sort,text='αλφαβητική σειρά',bg='#FFE5CC')
            self.alpha_order=Checkbutton(self.frame3,command=sort, text="αλφαβητική σειρά", font="BahnschriftLight 13", takefocus=0, bg="#FFE5CC", fg="#E91E63", 
            activebackground="#FF9999", activeforeground="#E91E63", bd=0, highlightthickness=0, width=20, selectcolor="black", height=2)
            self.alpha_order.pack(side='top')
            c.execute('SELECT authors FROM HMTYof')
            auth= c.fetchall()
            rank=1
            displayed_text=''
            for a in auth:
                displayed_text += str(rank)+')  '+str(a[0]) +2*'\n'
                rank+=1

            scrol = Scrollbar(self.frame3)
            self.text = Text(self.frame3, height=10, font='Arial 13', width=173, bg='#FFE5CC')
            self.text.pack(side='left', fill='y')
            scrol.pack(side='right', fill='y')
            scrol.config(command=self.text.yview)
            self.text.config(yscrollcommand=scrol.set)
            self.text.delete('1.0', END)
            self.text.insert('end', displayed_text)

            #self.text.see('end') an thes na xekina apo kato
            conn.commit()
            conn.close()

        if self.cmb.get()=='5-Ημερομηνιές':
            self.recreate_widget()
            c.execute('SELECT day FROM HMTYof')
            days= c.fetchall()
            displayed_text=''
            rank=1
            for d in days:
                displayed_text += str(rank)+')   '+str(d[0][0:10]) +2*'\n'
                rank+=1

            scrol = Scrollbar(self.frame3)
            self.text = Text(self.frame3, height=10, font='Arial 13', width=173, bg='#FFE5CC')
            self.text.pack(side='left', fill='y')
            scrol.pack(side='right', fill='y')
            scrol.config(command=self.text.yview)
            self.text.config(yscrollcommand=scrol.set)

            self.text.insert('end', displayed_text)
            conn.commit()
            conn.close()

        if self.cmb.get()=='6-Τίτλοι':
            self.recreate_widget()
            c.execute('SELECT title FROM HMTYof')
            titles= c.fetchall()
            displayed_text=''
            rank=1
            for t in titles:
                displayed_text += str(rank)+')  '+str(t[0]) +2*'\n'
                rank+=1

            scrol = Scrollbar(self.frame3)
            self.text = Text(self.frame3, height=10, font='Arial 13', width=173, bg='#FFE5CC')
            self.text.pack(side='left', fill='y')
            scrol.pack(side='right', fill='y')
            scrol.config(command=self.text.yview)
            self.text.config(yscrollcommand=scrol.set)

            self.text.insert('end', displayed_text)
            conn.commit()
            conn.close()

        if self.cmb.get()=='7-Θέματα':
            self.recreate_widget()
            c.execute('SELECT abstract FROM HMTYof')
            subj= c.fetchall()
            displayed_text=''
            rank=1
            for s in subj:
                displayed_text += str(rank)+')\t'+str(s[0]) +2*'\n'
                rank+=1

            scrol = Scrollbar(self.frame3)
            self.text = Text(self.frame3, height=10, font='Arial 9', width=223, bg='#FFE5CC')
            self.text.pack(side='left', fill='y')
            scrol.pack(side='right', fill='y')
            scrol.config(command=self.text.yview)
            self.text.config(yscrollcommand=scrol.set)

            self.text.insert('end', displayed_text)
            conn.commit()
            conn.close()

    def find(self,event):#entry 
        self.search.delete(0,'end')
        pass

    def click(self):#search button
        #self.search.delete(0,'end')
        pass

    def clicklink(self):
        PATH = 'C:\Program Files (x86)\chromedriver.exe'
        driver = webdriver.Chrome(PATH)
        driver.get("https://nemertes.library.upatras.gr/jspui/handle/10889/21?")

    def on_enter1(self,event):
        self.bt['background'] = '#FFCC99'
    
    def on_leave1(self,event):
        self.bt['background'] = '#fcb9b2'

    def on_enter(self,event):
        self.link['background'] = '#FFCC99'

    def on_leave(self,event):
        self.link['background'] = '#fcb9b2'

#main

if __name__ == "__main__":
    root = Tk()
    root.title('HMTY-Διδακτορικές Διατριβές')
    root.geometry('1915x1050')
    root.resizable(False,False)
    startingpage = Loadingscreen(root)
    #-----------------------------------------
    root = Tk()
    root.title('HMTY-Διδακτορικές Διατριβές')
    root.geometry('1915x1050')
    root.resizable(False,False)
    web =GUI(root)
    root.mainloop()

